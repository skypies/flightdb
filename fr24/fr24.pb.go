// Shameless clone of https://github.com/cathaypacific8747/fr24/blob/master/proto/request.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.12
// source: fr24.proto

package fr24

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Service int32

const (
	Service_PASSENGER               Service = 0
	Service_CARGO                   Service = 1
	Service_MILITARY_AND_GOVERNMENT Service = 2
	Service_BUSINESS_JETS           Service = 3
	Service_GENERAL_AVIATION        Service = 4
	Service_HELICOPTERS             Service = 5
	Service_LIGHTER_THAN_AIR        Service = 6
	Service_GLIDERS                 Service = 7
	Service_DRONES                  Service = 8
	Service_GROUND_VEHICLES         Service = 9
	Service_OTHER_SERVICE           Service = 10
	Service_NON_CATEGORIZED         Service = 11
)

// Enum value maps for Service.
var (
	Service_name = map[int32]string{
		0:  "PASSENGER",
		1:  "CARGO",
		2:  "MILITARY_AND_GOVERNMENT",
		3:  "BUSINESS_JETS",
		4:  "GENERAL_AVIATION",
		5:  "HELICOPTERS",
		6:  "LIGHTER_THAN_AIR",
		7:  "GLIDERS",
		8:  "DRONES",
		9:  "GROUND_VEHICLES",
		10: "OTHER_SERVICE",
		11: "NON_CATEGORIZED",
	}
	Service_value = map[string]int32{
		"PASSENGER":               0,
		"CARGO":                   1,
		"MILITARY_AND_GOVERNMENT": 2,
		"BUSINESS_JETS":           3,
		"GENERAL_AVIATION":        4,
		"HELICOPTERS":             5,
		"LIGHTER_THAN_AIR":        6,
		"GLIDERS":                 7,
		"DRONES":                  8,
		"GROUND_VEHICLES":         9,
		"OTHER_SERVICE":           10,
		"NON_CATEGORIZED":         11,
	}
)

func (x Service) Enum() *Service {
	p := new(Service)
	*p = x
	return p
}

func (x Service) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Service) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto_enumTypes[0].Descriptor()
}

func (Service) Type() protoreflect.EnumType {
	return &file_fr24_proto_enumTypes[0]
}

func (x Service) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Service.Descriptor instead.
func (Service) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{0}
}

type DataSource int32

const (
	DataSource_ADSB              DataSource = 0
	DataSource_MLAT              DataSource = 1
	DataSource_FLARM             DataSource = 2
	DataSource_FAA               DataSource = 3
	DataSource_ESTIMATED         DataSource = 4
	DataSource_SATELLITE         DataSource = 5
	DataSource_OTHER_DATA_SOURCE DataSource = 6
	DataSource_UAT               DataSource = 7
	DataSource_SPIDERTRACKS      DataSource = 8
	DataSource_AUS               DataSource = 9
)

// Enum value maps for DataSource.
var (
	DataSource_name = map[int32]string{
		0: "ADSB",
		1: "MLAT",
		2: "FLARM",
		3: "FAA",
		4: "ESTIMATED",
		5: "SATELLITE",
		6: "OTHER_DATA_SOURCE",
		7: "UAT",
		8: "SPIDERTRACKS",
		9: "AUS",
	}
	DataSource_value = map[string]int32{
		"ADSB":              0,
		"MLAT":              1,
		"FLARM":             2,
		"FAA":               3,
		"ESTIMATED":         4,
		"SATELLITE":         5,
		"OTHER_DATA_SOURCE": 6,
		"UAT":               7,
		"SPIDERTRACKS":      8,
		"AUS":               9,
	}
)

func (x DataSource) Enum() *DataSource {
	p := new(DataSource)
	*p = x
	return p
}

func (x DataSource) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DataSource) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto_enumTypes[1].Descriptor()
}

func (DataSource) Type() protoreflect.EnumType {
	return &file_fr24_proto_enumTypes[1]
}

func (x DataSource) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DataSource.Descriptor instead.
func (DataSource) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{1}
}

type FiltersList_AirlineFilter_Type int32

const (
	FiltersList_AirlineFilter_PAINTED_AS  FiltersList_AirlineFilter_Type = 0
	FiltersList_AirlineFilter_OPERATED_AS FiltersList_AirlineFilter_Type = 1
)

// Enum value maps for FiltersList_AirlineFilter_Type.
var (
	FiltersList_AirlineFilter_Type_name = map[int32]string{
		0: "PAINTED_AS",
		1: "OPERATED_AS",
	}
	FiltersList_AirlineFilter_Type_value = map[string]int32{
		"PAINTED_AS":  0,
		"OPERATED_AS": 1,
	}
)

func (x FiltersList_AirlineFilter_Type) Enum() *FiltersList_AirlineFilter_Type {
	p := new(FiltersList_AirlineFilter_Type)
	*p = x
	return p
}

func (x FiltersList_AirlineFilter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FiltersList_AirlineFilter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto_enumTypes[2].Descriptor()
}

func (FiltersList_AirlineFilter_Type) Type() protoreflect.EnumType {
	return &file_fr24_proto_enumTypes[2]
}

func (x FiltersList_AirlineFilter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FiltersList_AirlineFilter_Type.Descriptor instead.
func (FiltersList_AirlineFilter_Type) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{0, 2, 0}
}

type FiltersList_AirportFilter_Type int32

const (
	FiltersList_AirportFilter_BOTH     FiltersList_AirportFilter_Type = 0
	FiltersList_AirportFilter_INBOUND  FiltersList_AirportFilter_Type = 1
	FiltersList_AirportFilter_OUTBOUND FiltersList_AirportFilter_Type = 2
)

// Enum value maps for FiltersList_AirportFilter_Type.
var (
	FiltersList_AirportFilter_Type_name = map[int32]string{
		0: "BOTH",
		1: "INBOUND",
		2: "OUTBOUND",
	}
	FiltersList_AirportFilter_Type_value = map[string]int32{
		"BOTH":     0,
		"INBOUND":  1,
		"OUTBOUND": 2,
	}
)

func (x FiltersList_AirportFilter_Type) Enum() *FiltersList_AirportFilter_Type {
	p := new(FiltersList_AirportFilter_Type)
	*p = x
	return p
}

func (x FiltersList_AirportFilter_Type) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FiltersList_AirportFilter_Type) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto_enumTypes[3].Descriptor()
}

func (FiltersList_AirportFilter_Type) Type() protoreflect.EnumType {
	return &file_fr24_proto_enumTypes[3]
}

func (x FiltersList_AirportFilter_Type) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FiltersList_AirportFilter_Type.Descriptor instead.
func (FiltersList_AirportFilter_Type) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{0, 3, 0}
}

type LiveFeedRequest_Settings_TrafficType int32

const (
	LiveFeedRequest_Settings_NONE          LiveFeedRequest_Settings_TrafficType = 0
	LiveFeedRequest_Settings_GROUND_ONLY   LiveFeedRequest_Settings_TrafficType = 1
	LiveFeedRequest_Settings_AIRBORNE_ONLY LiveFeedRequest_Settings_TrafficType = 2
	LiveFeedRequest_Settings_ALL           LiveFeedRequest_Settings_TrafficType = 3
)

// Enum value maps for LiveFeedRequest_Settings_TrafficType.
var (
	LiveFeedRequest_Settings_TrafficType_name = map[int32]string{
		0: "NONE",
		1: "GROUND_ONLY",
		2: "AIRBORNE_ONLY",
		3: "ALL",
	}
	LiveFeedRequest_Settings_TrafficType_value = map[string]int32{
		"NONE":          0,
		"GROUND_ONLY":   1,
		"AIRBORNE_ONLY": 2,
		"ALL":           3,
	}
)

func (x LiveFeedRequest_Settings_TrafficType) Enum() *LiveFeedRequest_Settings_TrafficType {
	p := new(LiveFeedRequest_Settings_TrafficType)
	*p = x
	return p
}

func (x LiveFeedRequest_Settings_TrafficType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (LiveFeedRequest_Settings_TrafficType) Descriptor() protoreflect.EnumDescriptor {
	return file_fr24_proto_enumTypes[4].Descriptor()
}

func (LiveFeedRequest_Settings_TrafficType) Type() protoreflect.EnumType {
	return &file_fr24_proto_enumTypes[4]
}

func (x LiveFeedRequest_Settings_TrafficType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use LiveFeedRequest_Settings_TrafficType.Descriptor instead.
func (LiveFeedRequest_Settings_TrafficType) EnumDescriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{1, 1, 0}
}

type FiltersList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AltitudeRangesList []*FiltersList_AltitudeRange `protobuf:"bytes,1,rep,name=altitude_ranges_list,json=altitudeRangesList,proto3" json:"altitude_ranges_list,omitempty"`
	SpeedRangesList    []*FiltersList_SpeedRange    `protobuf:"bytes,2,rep,name=speed_ranges_list,json=speedRangesList,proto3" json:"speed_ranges_list,omitempty"` // NOTE: ground speed
	AirlineFiltersList []*FiltersList_AirlineFilter `protobuf:"bytes,3,rep,name=airline_filters_list,json=airlineFiltersList,proto3" json:"airline_filters_list,omitempty"`
	CallsignsList      []string                     `protobuf:"bytes,4,rep,name=callsigns_list,json=callsignsList,proto3" json:"callsigns_list,omitempty"`
	RadarsList         []string                     `protobuf:"bytes,5,rep,name=radars_list,json=radarsList,proto3" json:"radars_list,omitempty"` // receiver: e.g. T-VHST000
	RegsList           []string                     `protobuf:"bytes,6,rep,name=regs_list,json=regsList,proto3" json:"regs_list,omitempty"`
	AirportsList       []*FiltersList_AirportFilter `protobuf:"bytes,7,rep,name=airports_list,json=airportsList,proto3" json:"airports_list,omitempty"`
	// repeated Flight flights_list = 8;
	TypesList           []string                      `protobuf:"bytes,9,rep,name=types_list,json=typesList,proto3" json:"types_list,omitempty"` // e.g. B7*
	BirthYearRangesList []*FiltersList_BirthYearRange `protobuf:"bytes,10,rep,name=birth_year_ranges_list,json=birthYearRangesList,proto3" json:"birth_year_ranges_list,omitempty"`
	// repeated Squawk squawks_list = 11;
	OriginsList      []*FiltersList_ODFilter `protobuf:"bytes,12,rep,name=origins_list,json=originsList,proto3" json:"origins_list,omitempty"`
	DestinationsList []*FiltersList_ODFilter `protobuf:"bytes,13,rep,name=destinations_list,json=destinationsList,proto3" json:"destinations_list,omitempty"`
	CategoriesList   []Service               `protobuf:"varint,14,rep,packed,name=categories_list,json=categoriesList,proto3,enum=fr24.feed.api.v1.Service" json:"categories_list,omitempty"`
}

func (x *FiltersList) Reset() {
	*x = FiltersList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiltersList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiltersList) ProtoMessage() {}

func (x *FiltersList) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiltersList.ProtoReflect.Descriptor instead.
func (*FiltersList) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{0}
}

func (x *FiltersList) GetAltitudeRangesList() []*FiltersList_AltitudeRange {
	if x != nil {
		return x.AltitudeRangesList
	}
	return nil
}

func (x *FiltersList) GetSpeedRangesList() []*FiltersList_SpeedRange {
	if x != nil {
		return x.SpeedRangesList
	}
	return nil
}

func (x *FiltersList) GetAirlineFiltersList() []*FiltersList_AirlineFilter {
	if x != nil {
		return x.AirlineFiltersList
	}
	return nil
}

func (x *FiltersList) GetCallsignsList() []string {
	if x != nil {
		return x.CallsignsList
	}
	return nil
}

func (x *FiltersList) GetRadarsList() []string {
	if x != nil {
		return x.RadarsList
	}
	return nil
}

func (x *FiltersList) GetRegsList() []string {
	if x != nil {
		return x.RegsList
	}
	return nil
}

func (x *FiltersList) GetAirportsList() []*FiltersList_AirportFilter {
	if x != nil {
		return x.AirportsList
	}
	return nil
}

func (x *FiltersList) GetTypesList() []string {
	if x != nil {
		return x.TypesList
	}
	return nil
}

func (x *FiltersList) GetBirthYearRangesList() []*FiltersList_BirthYearRange {
	if x != nil {
		return x.BirthYearRangesList
	}
	return nil
}

func (x *FiltersList) GetOriginsList() []*FiltersList_ODFilter {
	if x != nil {
		return x.OriginsList
	}
	return nil
}

func (x *FiltersList) GetDestinationsList() []*FiltersList_ODFilter {
	if x != nil {
		return x.DestinationsList
	}
	return nil
}

func (x *FiltersList) GetCategoriesList() []Service {
	if x != nil {
		return x.CategoriesList
	}
	return nil
}

// ChQNw/XgQRVxPU5BHXsUwEIl7NEBQxIcCgoAAQIDBAUGBwgJEgwAAQIDBAUGBwgJCgsYAzABONwLQMBwUgsKA3JlZwoEdHlwZQ==
type LiveFeedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Bounds        *LiveFeedRequest_Bounds   `protobuf:"bytes,1,opt,name=bounds,proto3" json:"bounds,omitempty"`
	Settings      *LiveFeedRequest_Settings `protobuf:"bytes,2,opt,name=settings,proto3" json:"settings,omitempty"`
	FiltersList   *FiltersList              `protobuf:"bytes,3,opt,name=filters_list,json=filtersList,proto3,oneof" json:"filters_list,omitempty"`
	CustomFleetId *string                   `protobuf:"bytes,4,opt,name=custom_fleet_id,json=customFleetId,proto3,oneof" json:"custom_fleet_id,omitempty"` // requires auth
	// 5: ???
	Stats  bool  `protobuf:"varint,6,opt,name=stats,proto3" json:"stats,omitempty"`
	Limit  int32 `protobuf:"varint,7,opt,name=limit,proto3" json:"limit,omitempty"`   // default 1500
	Maxage int32 `protobuf:"varint,8,opt,name=maxage,proto3" json:"maxage,omitempty"` // default 14400
	// 9: ???
	FieldMask        *LiveFeedRequest_FieldMask `protobuf:"bytes,10,opt,name=field_mask,json=fieldMask,proto3" json:"field_mask,omitempty"`
	SelectedFlightid []uint32                   `protobuf:"fixed32,11,rep,packed,name=selected_flightid,json=selectedFlightid,proto3" json:"selected_flightid,omitempty"`
}

func (x *LiveFeedRequest) Reset() {
	*x = LiveFeedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedRequest) ProtoMessage() {}

func (x *LiveFeedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedRequest.ProtoReflect.Descriptor instead.
func (*LiveFeedRequest) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{1}
}

func (x *LiveFeedRequest) GetBounds() *LiveFeedRequest_Bounds {
	if x != nil {
		return x.Bounds
	}
	return nil
}

func (x *LiveFeedRequest) GetSettings() *LiveFeedRequest_Settings {
	if x != nil {
		return x.Settings
	}
	return nil
}

func (x *LiveFeedRequest) GetFiltersList() *FiltersList {
	if x != nil {
		return x.FiltersList
	}
	return nil
}

func (x *LiveFeedRequest) GetCustomFleetId() string {
	if x != nil && x.CustomFleetId != nil {
		return *x.CustomFleetId
	}
	return ""
}

func (x *LiveFeedRequest) GetStats() bool {
	if x != nil {
		return x.Stats
	}
	return false
}

func (x *LiveFeedRequest) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *LiveFeedRequest) GetMaxage() int32 {
	if x != nil {
		return x.Maxage
	}
	return 0
}

func (x *LiveFeedRequest) GetFieldMask() *LiveFeedRequest_FieldMask {
	if x != nil {
		return x.FieldMask
	}
	return nil
}

func (x *LiveFeedRequest) GetSelectedFlightid() []uint32 {
	if x != nil {
		return x.SelectedFlightid
	}
	return nil
}

type LiveFeedResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FlightsList        []*LiveFeedResponse_FlightData `protobuf:"bytes,1,rep,name=flights_list,json=flightsList,proto3" json:"flights_list,omitempty"`
	Stats              *LiveFeedResponse_Statistics   `protobuf:"bytes,2,opt,name=stats,proto3" json:"stats,omitempty"`
	SelectedFlightInfo []*LiveFeedResponse_FlightData `protobuf:"bytes,3,rep,name=selected_flight_info,json=selectedFlightInfo,proto3" json:"selected_flight_info,omitempty"`
}

func (x *LiveFeedResponse) Reset() {
	*x = LiveFeedResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedResponse) ProtoMessage() {}

func (x *LiveFeedResponse) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedResponse.ProtoReflect.Descriptor instead.
func (*LiveFeedResponse) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{2}
}

func (x *LiveFeedResponse) GetFlightsList() []*LiveFeedResponse_FlightData {
	if x != nil {
		return x.FlightsList
	}
	return nil
}

func (x *LiveFeedResponse) GetStats() *LiveFeedResponse_Statistics {
	if x != nil {
		return x.Stats
	}
	return nil
}

func (x *LiveFeedResponse) GetSelectedFlightInfo() []*LiveFeedResponse_FlightData {
	if x != nil {
		return x.SelectedFlightInfo
	}
	return nil
}

type FiltersList_AltitudeRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *FiltersList_AltitudeRange) Reset() {
	*x = FiltersList_AltitudeRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiltersList_AltitudeRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiltersList_AltitudeRange) ProtoMessage() {}

func (x *FiltersList_AltitudeRange) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiltersList_AltitudeRange.ProtoReflect.Descriptor instead.
func (*FiltersList_AltitudeRange) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{0, 0}
}

func (x *FiltersList_AltitudeRange) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *FiltersList_AltitudeRange) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type FiltersList_SpeedRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *FiltersList_SpeedRange) Reset() {
	*x = FiltersList_SpeedRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiltersList_SpeedRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiltersList_SpeedRange) ProtoMessage() {}

func (x *FiltersList_SpeedRange) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiltersList_SpeedRange.ProtoReflect.Descriptor instead.
func (*FiltersList_SpeedRange) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{0, 1}
}

func (x *FiltersList_SpeedRange) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *FiltersList_SpeedRange) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type FiltersList_AirlineFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Icao string                         `protobuf:"bytes,1,opt,name=icao,proto3" json:"icao,omitempty"` // e.g. CPA
	Type FiltersList_AirlineFilter_Type `protobuf:"varint,2,opt,name=type,proto3,enum=fr24.feed.api.v1.FiltersList_AirlineFilter_Type" json:"type,omitempty"`
}

func (x *FiltersList_AirlineFilter) Reset() {
	*x = FiltersList_AirlineFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiltersList_AirlineFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiltersList_AirlineFilter) ProtoMessage() {}

func (x *FiltersList_AirlineFilter) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiltersList_AirlineFilter.ProtoReflect.Descriptor instead.
func (*FiltersList_AirlineFilter) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{0, 2}
}

func (x *FiltersList_AirlineFilter) GetIcao() string {
	if x != nil {
		return x.Icao
	}
	return ""
}

func (x *FiltersList_AirlineFilter) GetType() FiltersList_AirlineFilter_Type {
	if x != nil {
		return x.Type
	}
	return FiltersList_AirlineFilter_PAINTED_AS
}

type FiltersList_AirportFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iata      string                         `protobuf:"bytes,1,opt,name=iata,proto3" json:"iata,omitempty"`
	CountryId int32                          `protobuf:"varint,2,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
	Type      FiltersList_AirportFilter_Type `protobuf:"varint,3,opt,name=type,proto3,enum=fr24.feed.api.v1.FiltersList_AirportFilter_Type" json:"type,omitempty"`
}

func (x *FiltersList_AirportFilter) Reset() {
	*x = FiltersList_AirportFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiltersList_AirportFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiltersList_AirportFilter) ProtoMessage() {}

func (x *FiltersList_AirportFilter) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiltersList_AirportFilter.ProtoReflect.Descriptor instead.
func (*FiltersList_AirportFilter) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{0, 3}
}

func (x *FiltersList_AirportFilter) GetIata() string {
	if x != nil {
		return x.Iata
	}
	return ""
}

func (x *FiltersList_AirportFilter) GetCountryId() int32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

func (x *FiltersList_AirportFilter) GetType() FiltersList_AirportFilter_Type {
	if x != nil {
		return x.Type
	}
	return FiltersList_AirportFilter_BOTH
}

type FiltersList_BirthYearRange struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Min int32 `protobuf:"varint,1,opt,name=min,proto3" json:"min,omitempty"`
	Max int32 `protobuf:"varint,2,opt,name=max,proto3" json:"max,omitempty"`
}

func (x *FiltersList_BirthYearRange) Reset() {
	*x = FiltersList_BirthYearRange{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiltersList_BirthYearRange) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiltersList_BirthYearRange) ProtoMessage() {}

func (x *FiltersList_BirthYearRange) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiltersList_BirthYearRange.ProtoReflect.Descriptor instead.
func (*FiltersList_BirthYearRange) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{0, 4}
}

func (x *FiltersList_BirthYearRange) GetMin() int32 {
	if x != nil {
		return x.Min
	}
	return 0
}

func (x *FiltersList_BirthYearRange) GetMax() int32 {
	if x != nil {
		return x.Max
	}
	return 0
}

type FiltersList_ODFilter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Iata      string `protobuf:"bytes,1,opt,name=iata,proto3" json:"iata,omitempty"`
	CountryId int32  `protobuf:"varint,2,opt,name=country_id,json=countryId,proto3" json:"country_id,omitempty"`
}

func (x *FiltersList_ODFilter) Reset() {
	*x = FiltersList_ODFilter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FiltersList_ODFilter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FiltersList_ODFilter) ProtoMessage() {}

func (x *FiltersList_ODFilter) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FiltersList_ODFilter.ProtoReflect.Descriptor instead.
func (*FiltersList_ODFilter) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{0, 5}
}

func (x *FiltersList_ODFilter) GetIata() string {
	if x != nil {
		return x.Iata
	}
	return ""
}

func (x *FiltersList_ODFilter) GetCountryId() int32 {
	if x != nil {
		return x.CountryId
	}
	return 0
}

type LiveFeedRequest_Bounds struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	North float32 `protobuf:"fixed32,1,opt,name=north,proto3" json:"north,omitempty"`
	South float32 `protobuf:"fixed32,2,opt,name=south,proto3" json:"south,omitempty"`
	West  float32 `protobuf:"fixed32,3,opt,name=west,proto3" json:"west,omitempty"`
	East  float32 `protobuf:"fixed32,4,opt,name=east,proto3" json:"east,omitempty"`
}

func (x *LiveFeedRequest_Bounds) Reset() {
	*x = LiveFeedRequest_Bounds{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedRequest_Bounds) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedRequest_Bounds) ProtoMessage() {}

func (x *LiveFeedRequest_Bounds) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedRequest_Bounds.ProtoReflect.Descriptor instead.
func (*LiveFeedRequest_Bounds) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{1, 0}
}

func (x *LiveFeedRequest_Bounds) GetNorth() float32 {
	if x != nil {
		return x.North
	}
	return 0
}

func (x *LiveFeedRequest_Bounds) GetSouth() float32 {
	if x != nil {
		return x.South
	}
	return 0
}

func (x *LiveFeedRequest_Bounds) GetWest() float32 {
	if x != nil {
		return x.West
	}
	return 0
}

func (x *LiveFeedRequest_Bounds) GetEast() float32 {
	if x != nil {
		return x.East
	}
	return 0
}

type LiveFeedRequest_Settings struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourcesList  []DataSource                         `protobuf:"varint,1,rep,packed,name=sources_list,json=sourcesList,proto3,enum=fr24.feed.api.v1.DataSource" json:"sources_list,omitempty"`
	ServicesList []Service                            `protobuf:"varint,2,rep,packed,name=services_list,json=servicesList,proto3,enum=fr24.feed.api.v1.Service" json:"services_list,omitempty"`
	TrafficType  LiveFeedRequest_Settings_TrafficType `protobuf:"varint,3,opt,name=traffic_type,json=trafficType,proto3,enum=fr24.feed.api.v1.LiveFeedRequest_Settings_TrafficType" json:"traffic_type,omitempty"`
}

func (x *LiveFeedRequest_Settings) Reset() {
	*x = LiveFeedRequest_Settings{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedRequest_Settings) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedRequest_Settings) ProtoMessage() {}

func (x *LiveFeedRequest_Settings) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedRequest_Settings.ProtoReflect.Descriptor instead.
func (*LiveFeedRequest_Settings) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{1, 1}
}

func (x *LiveFeedRequest_Settings) GetSourcesList() []DataSource {
	if x != nil {
		return x.SourcesList
	}
	return nil
}

func (x *LiveFeedRequest_Settings) GetServicesList() []Service {
	if x != nil {
		return x.ServicesList
	}
	return nil
}

func (x *LiveFeedRequest_Settings) GetTrafficType() LiveFeedRequest_Settings_TrafficType {
	if x != nil {
		return x.TrafficType
	}
	return LiveFeedRequest_Settings_NONE
}

type LiveFeedRequest_FieldMask struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FieldName []string `protobuf:"bytes,1,rep,name=field_name,json=fieldName,proto3" json:"field_name,omitempty"`
}

func (x *LiveFeedRequest_FieldMask) Reset() {
	*x = LiveFeedRequest_FieldMask{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedRequest_FieldMask) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedRequest_FieldMask) ProtoMessage() {}

func (x *LiveFeedRequest_FieldMask) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedRequest_FieldMask.ProtoReflect.Descriptor instead.
func (*LiveFeedRequest_FieldMask) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{1, 2}
}

func (x *LiveFeedRequest_FieldMask) GetFieldName() []string {
	if x != nil {
		return x.FieldName
	}
	return nil
}

type LiveFeedResponse_FlightData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flightid    int32                                  `protobuf:"varint,1,opt,name=flightid,proto3" json:"flightid,omitempty"` // to hex
	Latitude    float32                                `protobuf:"fixed32,2,opt,name=latitude,proto3" json:"latitude,omitempty"`
	Longitude   float32                                `protobuf:"fixed32,3,opt,name=longitude,proto3" json:"longitude,omitempty"`
	Heading     int32                                  `protobuf:"varint,4,opt,name=heading,proto3" json:"heading,omitempty"`
	Altitude    int32                                  `protobuf:"varint,5,opt,name=altitude,proto3" json:"altitude,omitempty"`
	GroundSpeed int32                                  `protobuf:"varint,6,opt,name=ground_speed,json=groundSpeed,proto3" json:"ground_speed,omitempty"`
	Icon        int32                                  `protobuf:"varint,7,opt,name=icon,proto3" json:"icon,omitempty"`
	Status      int32                                  `protobuf:"varint,8,opt,name=status,proto3" json:"status,omitempty"`
	Timestamp   int32                                  `protobuf:"varint,9,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	OnGround    bool                                   `protobuf:"varint,10,opt,name=on_ground,json=onGround,proto3" json:"on_ground,omitempty"`
	Callsign    string                                 `protobuf:"bytes,11,opt,name=callsign,proto3" json:"callsign,omitempty"`
	Source      DataSource                             `protobuf:"varint,12,opt,name=source,proto3,enum=fr24.feed.api.v1.DataSource" json:"source,omitempty"`
	ExtraInfo   *LiveFeedResponse_FlightData_ExtraInfo `protobuf:"bytes,13,opt,name=extra_info,json=extraInfo,proto3" json:"extra_info,omitempty"`
}

func (x *LiveFeedResponse_FlightData) Reset() {
	*x = LiveFeedResponse_FlightData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedResponse_FlightData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedResponse_FlightData) ProtoMessage() {}

func (x *LiveFeedResponse_FlightData) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedResponse_FlightData.ProtoReflect.Descriptor instead.
func (*LiveFeedResponse_FlightData) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{2, 0}
}

func (x *LiveFeedResponse_FlightData) GetFlightid() int32 {
	if x != nil {
		return x.Flightid
	}
	return 0
}

func (x *LiveFeedResponse_FlightData) GetLatitude() float32 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *LiveFeedResponse_FlightData) GetLongitude() float32 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *LiveFeedResponse_FlightData) GetHeading() int32 {
	if x != nil {
		return x.Heading
	}
	return 0
}

func (x *LiveFeedResponse_FlightData) GetAltitude() int32 {
	if x != nil {
		return x.Altitude
	}
	return 0
}

func (x *LiveFeedResponse_FlightData) GetGroundSpeed() int32 {
	if x != nil {
		return x.GroundSpeed
	}
	return 0
}

func (x *LiveFeedResponse_FlightData) GetIcon() int32 {
	if x != nil {
		return x.Icon
	}
	return 0
}

func (x *LiveFeedResponse_FlightData) GetStatus() int32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *LiveFeedResponse_FlightData) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LiveFeedResponse_FlightData) GetOnGround() bool {
	if x != nil {
		return x.OnGround
	}
	return false
}

func (x *LiveFeedResponse_FlightData) GetCallsign() string {
	if x != nil {
		return x.Callsign
	}
	return ""
}

func (x *LiveFeedResponse_FlightData) GetSource() DataSource {
	if x != nil {
		return x.Source
	}
	return DataSource_ADSB
}

func (x *LiveFeedResponse_FlightData) GetExtraInfo() *LiveFeedResponse_FlightData_ExtraInfo {
	if x != nil {
		return x.ExtraInfo
	}
	return nil
}

type LiveFeedResponse_Statistics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Sources []*LiveFeedResponse_Statistics_SourceKV `protobuf:"bytes,1,rep,name=sources,proto3" json:"sources,omitempty"`
}

func (x *LiveFeedResponse_Statistics) Reset() {
	*x = LiveFeedResponse_Statistics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedResponse_Statistics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedResponse_Statistics) ProtoMessage() {}

func (x *LiveFeedResponse_Statistics) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedResponse_Statistics.ProtoReflect.Descriptor instead.
func (*LiveFeedResponse_Statistics) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{2, 1}
}

func (x *LiveFeedResponse_Statistics) GetSources() []*LiveFeedResponse_Statistics_SourceKV {
	if x != nil {
		return x.Sources
	}
	return nil
}

type LiveFeedResponse_FlightData_ExtraInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Flight          *string                                                `protobuf:"bytes,1,opt,name=flight,proto3,oneof" json:"flight,omitempty"` // iata flight number
	Reg             *string                                                `protobuf:"bytes,2,opt,name=reg,proto3,oneof" json:"reg,omitempty"`
	Route           *LiveFeedResponse_FlightData_ExtraInfo_Route           `protobuf:"bytes,3,opt,name=route,proto3,oneof" json:"route,omitempty"`
	Type            *string                                                `protobuf:"bytes,4,opt,name=type,proto3,oneof" json:"type,omitempty"`
	Squawk          *int32                                                 `protobuf:"varint,5,opt,name=squawk,proto3,oneof" json:"squawk,omitempty"` // NOTE: 20852 -> 0x5174
	Vspeed          *int32                                                 `protobuf:"varint,6,opt,name=vspeed,proto3,oneof" json:"vspeed,omitempty"`
	AcBirthday      *string                                                `protobuf:"bytes,7,opt,name=ac_birthday,json=acBirthday,proto3,oneof" json:"ac_birthday,omitempty"`
	CountryOfReg    *int32                                                 `protobuf:"varint,8,opt,name=country_of_reg,json=countryOfReg,proto3,oneof" json:"country_of_reg,omitempty"`
	Schedule        *LiveFeedResponse_FlightData_ExtraInfo_Schedule        `protobuf:"bytes,9,opt,name=schedule,proto3,oneof" json:"schedule,omitempty"`
	LogoId          *int32                                                 `protobuf:"varint,10,opt,name=logo_id,json=logoId,proto3,oneof" json:"logo_id,omitempty"`
	Airspace        *int32                                                 `protobuf:"varint,11,opt,name=airspace,proto3,oneof" json:"airspace,omitempty"` // FIR
	EmsInfo         *LiveFeedResponse_FlightData_ExtraInfo_EMS             `protobuf:"bytes,12,opt,name=ems_info,json=emsInfo,proto3,oneof" json:"ems_info,omitempty"`
	EmsAvailability *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability `protobuf:"bytes,13,opt,name=ems_availability,json=emsAvailability,proto3,oneof" json:"ems_availability,omitempty"`
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) Reset() {
	*x = LiveFeedResponse_FlightData_ExtraInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedResponse_FlightData_ExtraInfo) ProtoMessage() {}

func (x *LiveFeedResponse_FlightData_ExtraInfo) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedResponse_FlightData_ExtraInfo.ProtoReflect.Descriptor instead.
func (*LiveFeedResponse_FlightData_ExtraInfo) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{2, 0, 0}
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetFlight() string {
	if x != nil && x.Flight != nil {
		return *x.Flight
	}
	return ""
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetReg() string {
	if x != nil && x.Reg != nil {
		return *x.Reg
	}
	return ""
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetRoute() *LiveFeedResponse_FlightData_ExtraInfo_Route {
	if x != nil {
		return x.Route
	}
	return nil
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetType() string {
	if x != nil && x.Type != nil {
		return *x.Type
	}
	return ""
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetSquawk() int32 {
	if x != nil && x.Squawk != nil {
		return *x.Squawk
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetVspeed() int32 {
	if x != nil && x.Vspeed != nil {
		return *x.Vspeed
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetAcBirthday() string {
	if x != nil && x.AcBirthday != nil {
		return *x.AcBirthday
	}
	return ""
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetCountryOfReg() int32 {
	if x != nil && x.CountryOfReg != nil {
		return *x.CountryOfReg
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetSchedule() *LiveFeedResponse_FlightData_ExtraInfo_Schedule {
	if x != nil {
		return x.Schedule
	}
	return nil
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetLogoId() int32 {
	if x != nil && x.LogoId != nil {
		return *x.LogoId
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetAirspace() int32 {
	if x != nil && x.Airspace != nil {
		return *x.Airspace
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetEmsInfo() *LiveFeedResponse_FlightData_ExtraInfo_EMS {
	if x != nil {
		return x.EmsInfo
	}
	return nil
}

func (x *LiveFeedResponse_FlightData_ExtraInfo) GetEmsAvailability() *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability {
	if x != nil {
		return x.EmsAvailability
	}
	return nil
}

type LiveFeedResponse_FlightData_ExtraInfo_Route struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	From string `protobuf:"bytes,1,opt,name=from,proto3" json:"from,omitempty"`
	To   string `protobuf:"bytes,2,opt,name=to,proto3" json:"to,omitempty"`
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Route) Reset() {
	*x = LiveFeedResponse_FlightData_ExtraInfo_Route{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Route) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedResponse_FlightData_ExtraInfo_Route) ProtoMessage() {}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Route) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedResponse_FlightData_ExtraInfo_Route.ProtoReflect.Descriptor instead.
func (*LiveFeedResponse_FlightData_ExtraInfo_Route) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{2, 0, 0, 0}
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Route) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Route) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type LiveFeedResponse_FlightData_ExtraInfo_Schedule struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Std int32 `protobuf:"varint,1,opt,name=std,proto3" json:"std,omitempty"`
	Etd int32 `protobuf:"varint,2,opt,name=etd,proto3" json:"etd,omitempty"`
	Atd int32 `protobuf:"varint,3,opt,name=atd,proto3" json:"atd,omitempty"`
	Sta int32 `protobuf:"varint,4,opt,name=sta,proto3" json:"sta,omitempty"`
	Eta int32 `protobuf:"varint,5,opt,name=eta,proto3" json:"eta,omitempty"` //!
	Ata int32 `protobuf:"varint,6,opt,name=ata,proto3" json:"ata,omitempty"`
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Schedule) Reset() {
	*x = LiveFeedResponse_FlightData_ExtraInfo_Schedule{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Schedule) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedResponse_FlightData_ExtraInfo_Schedule) ProtoMessage() {}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Schedule) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedResponse_FlightData_ExtraInfo_Schedule.ProtoReflect.Descriptor instead.
func (*LiveFeedResponse_FlightData_ExtraInfo_Schedule) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{2, 0, 0, 1}
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Schedule) GetStd() int32 {
	if x != nil {
		return x.Std
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Schedule) GetEtd() int32 {
	if x != nil {
		return x.Etd
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Schedule) GetAtd() int32 {
	if x != nil {
		return x.Atd
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Schedule) GetSta() int32 {
	if x != nil {
		return x.Sta
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Schedule) GetEta() int32 {
	if x != nil {
		return x.Eta
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_Schedule) GetAta() int32 {
	if x != nil {
		return x.Ata
	}
	return 0
}

// a =? altitude
type LiveFeedResponse_FlightData_ExtraInfo_EMS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Qnh       *int32 `protobuf:"varint,1,opt,name=qnh,proto3,oneof" json:"qnh,omitempty"`   // often null
	Amcp      *int32 `protobuf:"varint,2,opt,name=amcp,proto3,oneof" json:"amcp,omitempty"` // likely barometric altitude
	Afms      *int32 `protobuf:"varint,3,opt,name=afms,proto3,oneof" json:"afms,omitempty"` // often null
	Oat       *int32 `protobuf:"varint,4,opt,name=oat,proto3,oneof" json:"oat,omitempty"`
	Ias       *int32 `protobuf:"varint,5,opt,name=ias,proto3,oneof" json:"ias,omitempty"`
	Tas       *int32 `protobuf:"varint,6,opt,name=tas,proto3,oneof" json:"tas,omitempty"`
	Mach      *int32 `protobuf:"varint,7,opt,name=mach,proto3,oneof" json:"mach,omitempty"` // NOTE: 1000 = mach 1
	Agps      *int32 `protobuf:"varint,8,opt,name=agps,proto3,oneof" json:"agps,omitempty"`
	Agpsdiff  *int32 `protobuf:"varint,9,opt,name=agpsdiff,proto3,oneof" json:"agpsdiff,omitempty"` // |amcp - agps|
	Apflags   *int32 `protobuf:"varint,10,opt,name=apflags,proto3,oneof" json:"apflags,omitempty"`  // often null
	WindDir   *int32 `protobuf:"varint,11,opt,name=wind_dir,json=windDir,proto3,oneof" json:"wind_dir,omitempty"`
	WindSpeed *int32 `protobuf:"varint,12,opt,name=wind_speed,json=windSpeed,proto3,oneof" json:"wind_speed,omitempty"`
	Rs        *int32 `protobuf:"varint,13,opt,name=rs,proto3,oneof" json:"rs,omitempty"` // unknown
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) Reset() {
	*x = LiveFeedResponse_FlightData_ExtraInfo_EMS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedResponse_FlightData_ExtraInfo_EMS) ProtoMessage() {}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedResponse_FlightData_ExtraInfo_EMS.ProtoReflect.Descriptor instead.
func (*LiveFeedResponse_FlightData_ExtraInfo_EMS) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{2, 0, 0, 2}
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetQnh() int32 {
	if x != nil && x.Qnh != nil {
		return *x.Qnh
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetAmcp() int32 {
	if x != nil && x.Amcp != nil {
		return *x.Amcp
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetAfms() int32 {
	if x != nil && x.Afms != nil {
		return *x.Afms
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetOat() int32 {
	if x != nil && x.Oat != nil {
		return *x.Oat
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetIas() int32 {
	if x != nil && x.Ias != nil {
		return *x.Ias
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetTas() int32 {
	if x != nil && x.Tas != nil {
		return *x.Tas
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetMach() int32 {
	if x != nil && x.Mach != nil {
		return *x.Mach
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetAgps() int32 {
	if x != nil && x.Agps != nil {
		return *x.Agps
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetAgpsdiff() int32 {
	if x != nil && x.Agpsdiff != nil {
		return *x.Agpsdiff
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetApflags() int32 {
	if x != nil && x.Apflags != nil {
		return *x.Apflags
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetWindDir() int32 {
	if x != nil && x.WindDir != nil {
		return *x.WindDir
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetWindSpeed() int32 {
	if x != nil && x.WindSpeed != nil {
		return *x.WindSpeed
	}
	return 0
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMS) GetRs() int32 {
	if x != nil && x.Rs != nil {
		return *x.Rs
	}
	return 0
}

type LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	QnhAvailability       *bool `protobuf:"varint,1,opt,name=qnh_availability,json=qnhAvailability,proto3,oneof" json:"qnh_availability,omitempty"`
	AmcpAvailability      *bool `protobuf:"varint,2,opt,name=amcp_availability,json=amcpAvailability,proto3,oneof" json:"amcp_availability,omitempty"`
	AfmsAvailability      *bool `protobuf:"varint,3,opt,name=afms_availability,json=afmsAvailability,proto3,oneof" json:"afms_availability,omitempty"`
	OatAvailability       *bool `protobuf:"varint,4,opt,name=oat_availability,json=oatAvailability,proto3,oneof" json:"oat_availability,omitempty"`
	IasAvailability       *bool `protobuf:"varint,5,opt,name=ias_availability,json=iasAvailability,proto3,oneof" json:"ias_availability,omitempty"`
	TasAvailability       *bool `protobuf:"varint,6,opt,name=tas_availability,json=tasAvailability,proto3,oneof" json:"tas_availability,omitempty"`
	MachAvailability      *bool `protobuf:"varint,7,opt,name=mach_availability,json=machAvailability,proto3,oneof" json:"mach_availability,omitempty"`
	AgpsAvailability      *bool `protobuf:"varint,8,opt,name=agps_availability,json=agpsAvailability,proto3,oneof" json:"agps_availability,omitempty"`
	AgpsdiffAvailability  *bool `protobuf:"varint,9,opt,name=agpsdiff_availability,json=agpsdiffAvailability,proto3,oneof" json:"agpsdiff_availability,omitempty"`
	ApflagsAvailability   *bool `protobuf:"varint,10,opt,name=apflags_availability,json=apflagsAvailability,proto3,oneof" json:"apflags_availability,omitempty"`
	WindDirAvailability   *bool `protobuf:"varint,11,opt,name=wind_dir_availability,json=windDirAvailability,proto3,oneof" json:"wind_dir_availability,omitempty"`
	WindSpeedAvailability *bool `protobuf:"varint,12,opt,name=wind_speed_availability,json=windSpeedAvailability,proto3,oneof" json:"wind_speed_availability,omitempty"`
	RsAvailability        *bool `protobuf:"varint,13,opt,name=rs_availability,json=rsAvailability,proto3,oneof" json:"rs_availability,omitempty"`
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) Reset() {
	*x = LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) ProtoMessage() {}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability.ProtoReflect.Descriptor instead.
func (*LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{2, 0, 0, 3}
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetQnhAvailability() bool {
	if x != nil && x.QnhAvailability != nil {
		return *x.QnhAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetAmcpAvailability() bool {
	if x != nil && x.AmcpAvailability != nil {
		return *x.AmcpAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetAfmsAvailability() bool {
	if x != nil && x.AfmsAvailability != nil {
		return *x.AfmsAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetOatAvailability() bool {
	if x != nil && x.OatAvailability != nil {
		return *x.OatAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetIasAvailability() bool {
	if x != nil && x.IasAvailability != nil {
		return *x.IasAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetTasAvailability() bool {
	if x != nil && x.TasAvailability != nil {
		return *x.TasAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetMachAvailability() bool {
	if x != nil && x.MachAvailability != nil {
		return *x.MachAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetAgpsAvailability() bool {
	if x != nil && x.AgpsAvailability != nil {
		return *x.AgpsAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetAgpsdiffAvailability() bool {
	if x != nil && x.AgpsdiffAvailability != nil {
		return *x.AgpsdiffAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetApflagsAvailability() bool {
	if x != nil && x.ApflagsAvailability != nil {
		return *x.ApflagsAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetWindDirAvailability() bool {
	if x != nil && x.WindDirAvailability != nil {
		return *x.WindDirAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetWindSpeedAvailability() bool {
	if x != nil && x.WindSpeedAvailability != nil {
		return *x.WindSpeedAvailability
	}
	return false
}

func (x *LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability) GetRsAvailability() bool {
	if x != nil && x.RsAvailability != nil {
		return *x.RsAvailability
	}
	return false
}

type LiveFeedResponse_Statistics_SourceKV struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Source DataSource `protobuf:"varint,1,opt,name=source,proto3,enum=fr24.feed.api.v1.DataSource" json:"source,omitempty"`
	Count  int32      `protobuf:"varint,2,opt,name=count,proto3" json:"count,omitempty"`
}

func (x *LiveFeedResponse_Statistics_SourceKV) Reset() {
	*x = LiveFeedResponse_Statistics_SourceKV{}
	if protoimpl.UnsafeEnabled {
		mi := &file_fr24_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LiveFeedResponse_Statistics_SourceKV) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LiveFeedResponse_Statistics_SourceKV) ProtoMessage() {}

func (x *LiveFeedResponse_Statistics_SourceKV) ProtoReflect() protoreflect.Message {
	mi := &file_fr24_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LiveFeedResponse_Statistics_SourceKV.ProtoReflect.Descriptor instead.
func (*LiveFeedResponse_Statistics_SourceKV) Descriptor() ([]byte, []int) {
	return file_fr24_proto_rawDescGZIP(), []int{2, 1, 0}
}

func (x *LiveFeedResponse_Statistics_SourceKV) GetSource() DataSource {
	if x != nil {
		return x.Source
	}
	return DataSource_ADSB
}

func (x *LiveFeedResponse_Statistics_SourceKV) GetCount() int32 {
	if x != nil {
		return x.Count
	}
	return 0
}

var File_fr24_proto protoreflect.FileDescriptor

var file_fr24_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10, 0x66, 0x72,
	0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x22, 0xe7,
	0x0a, 0x0a, 0x0b, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5d,
	0x0a, 0x14, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66,
	0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x6c, 0x74, 0x69,
	0x74, 0x75, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x12, 0x61, 0x6c, 0x74, 0x69, 0x74,
	0x75, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x54, 0x0a,
	0x11, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x52, 0x0f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x5d, 0x0a, 0x14, 0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x12,
	0x61, 0x69, 0x72, 0x6c, 0x69, 0x6e, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x12, 0x25, 0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x73, 0x69, 0x67, 0x6e, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0d, 0x63, 0x61, 0x6c, 0x6c,
	0x73, 0x69, 0x67, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1f, 0x0a, 0x0b, 0x72, 0x61, 0x64,
	0x61, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x0a,
	0x72, 0x61, 0x64, 0x61, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x72, 0x65,
	0x67, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x67, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x50, 0x0a, 0x0d, 0x61, 0x69, 0x72, 0x70, 0x6f,
	0x72, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x69,
	0x72, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0c, 0x61, 0x69, 0x72,
	0x70, 0x6f, 0x72, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x79, 0x70,
	0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x74,
	0x79, 0x70, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x61, 0x0a, 0x16, 0x62, 0x69, 0x72, 0x74,
	0x68, 0x5f, 0x79, 0x65, 0x61, 0x72, 0x5f, 0x72, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74,
	0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x52, 0x13, 0x62, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61,
	0x72, 0x52, 0x61, 0x6e, 0x67, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x6f,
	0x72, 0x69, 0x67, 0x69, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0c, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x2e, 0x4f, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x0b, 0x6f, 0x72, 0x69, 0x67, 0x69,
	0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x11, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0d, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x26, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x2e, 0x4f, 0x44, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x52, 0x10, 0x64, 0x65, 0x73, 0x74, 0x69,
	0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x0f, 0x63,
	0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52,
	0x0e, 0x63, 0x61, 0x74, 0x65, 0x67, 0x6f, 0x72, 0x69, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x1a,
	0x33, 0x0a, 0x0d, 0x41, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x52, 0x61, 0x6e, 0x67, 0x65,
	0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d,
	0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6d, 0x61, 0x78, 0x1a, 0x30, 0x0a, 0x0a, 0x53, 0x70, 0x65, 0x65, 0x64, 0x52, 0x61, 0x6e,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0x92, 0x01, 0x0a, 0x0d, 0x41, 0x69, 0x72, 0x6c, 0x69,
	0x6e, 0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x61, 0x6f,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x63, 0x61, 0x6f, 0x12, 0x44, 0x0a, 0x04,
	0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30, 0x2e, 0x66, 0x72, 0x32,
	0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x69,
	0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x69, 0x72, 0x6c, 0x69, 0x6e,
	0x65, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x22, 0x27, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x41,
	0x49, 0x4e, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x50,
	0x45, 0x52, 0x41, 0x54, 0x45, 0x44, 0x5f, 0x41, 0x53, 0x10, 0x01, 0x1a, 0xb5, 0x01, 0x0a, 0x0d,
	0x41, 0x69, 0x72, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a,
	0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x61, 0x74,
	0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64,
	0x12, 0x44, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x30,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x2e, 0x41, 0x69,
	0x72, 0x70, 0x6f, 0x72, 0x74, 0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x2e, 0x54, 0x79, 0x70, 0x65,
	0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08,
	0x0a, 0x04, 0x42, 0x4f, 0x54, 0x48, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x4e, 0x42, 0x4f,
	0x55, 0x4e, 0x44, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x55, 0x54, 0x42, 0x4f, 0x55, 0x4e,
	0x44, 0x10, 0x02, 0x1a, 0x34, 0x0a, 0x0e, 0x42, 0x69, 0x72, 0x74, 0x68, 0x59, 0x65, 0x61, 0x72,
	0x52, 0x61, 0x6e, 0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x69, 0x6e, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x03, 0x6d, 0x69, 0x6e, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x61, 0x78, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6d, 0x61, 0x78, 0x1a, 0x3d, 0x0a, 0x08, 0x4f, 0x44, 0x46,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x61, 0x74, 0x61, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6f, 0x75,
	0x6e, 0x74, 0x72, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x64, 0x22, 0xaa, 0x07, 0x0a, 0x0f, 0x4c, 0x69, 0x76,
	0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x40, 0x0a, 0x06,
	0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x66,
	0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e,
	0x42, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x52, 0x06, 0x62, 0x6f, 0x75, 0x6e, 0x64, 0x73, 0x12, 0x46,
	0x0a, 0x08, 0x73, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x2a, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x52, 0x08, 0x73, 0x65,
	0x74, 0x74, 0x69, 0x6e, 0x67, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72,
	0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x66,
	0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x48, 0x00, 0x52, 0x0b, 0x66,
	0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x88, 0x01, 0x01, 0x12, 0x2b, 0x0a,
	0x0f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6c, 0x65, 0x65, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x0d, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d,
	0x46, 0x6c, 0x65, 0x65, 0x74, 0x49, 0x64, 0x88, 0x01, 0x01, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74,
	0x61, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x73,
	0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x61, 0x78, 0x61, 0x67, 0x65,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6d, 0x61, 0x78, 0x61, 0x67, 0x65, 0x12, 0x4a,
	0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6d, 0x61, 0x73, 0x6b, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x2b, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x52,
	0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73, 0x6b, 0x12, 0x2b, 0x0a, 0x11, 0x73, 0x65,
	0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x03, 0x28, 0x07, 0x52, 0x10, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x64, 0x1a, 0x5c, 0x0a, 0x06, 0x42, 0x6f, 0x75, 0x6e, 0x64,
	0x73, 0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x05, 0x6e, 0x6f, 0x72, 0x74, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x6f, 0x75, 0x74, 0x68,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x73, 0x6f, 0x75, 0x74, 0x68, 0x12, 0x12, 0x0a,
	0x04, 0x77, 0x65, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x04, 0x77, 0x65, 0x73,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x61, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x04, 0x65, 0x61, 0x73, 0x74, 0x1a, 0xac, 0x02, 0x0a, 0x08, 0x53, 0x65, 0x74, 0x74, 0x69, 0x6e,
	0x67, 0x73, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x5f, 0x6c, 0x69,
	0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e,
	0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61,
	0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x0b, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x3e, 0x0a, 0x0d, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x5f,
	0x6c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x19, 0x2e, 0x66, 0x72, 0x32,
	0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x4c,
	0x69, 0x73, 0x74, 0x12, 0x59, 0x0a, 0x0c, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x5f, 0x74,
	0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x36, 0x2e, 0x66, 0x72, 0x32, 0x34,
	0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76,
	0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x53, 0x65, 0x74,
	0x74, 0x69, 0x6e, 0x67, 0x73, 0x2e, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0b, 0x74, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x22, 0x44,
	0x0a, 0x0b, 0x54, 0x72, 0x61, 0x66, 0x66, 0x69, 0x63, 0x54, 0x79, 0x70, 0x65, 0x12, 0x08, 0x0a,
	0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x47, 0x52, 0x4f, 0x55, 0x4e,
	0x44, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x49, 0x52, 0x42,
	0x4f, 0x52, 0x4e, 0x45, 0x5f, 0x4f, 0x4e, 0x4c, 0x59, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x41,
	0x4c, 0x4c, 0x10, 0x03, 0x1a, 0x2a, 0x0a, 0x09, 0x46, 0x69, 0x65, 0x6c, 0x64, 0x4d, 0x61, 0x73,
	0x6b, 0x12, 0x1d, 0x0a, 0x0a, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x09, 0x66, 0x69, 0x65, 0x6c, 0x64, 0x4e, 0x61, 0x6d, 0x65,
	0x42, 0x0f, 0x0a, 0x0d, 0x5f, 0x66, 0x69, 0x6c, 0x74, 0x65, 0x72, 0x73, 0x5f, 0x6c, 0x69, 0x73,
	0x74, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x63, 0x75, 0x73, 0x74, 0x6f, 0x6d, 0x5f, 0x66, 0x6c, 0x65,
	0x65, 0x74, 0x5f, 0x69, 0x64, 0x22, 0xd2, 0x1a, 0x0a, 0x10, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65,
	0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a, 0x0c, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x73, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x2d, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0b, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x05,
	0x73, 0x74, 0x61, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2d, 0x2e, 0x66, 0x72,
	0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c,
	0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e,
	0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74,
	0x73, 0x12, 0x5f, 0x0a, 0x14, 0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x5f, 0x66, 0x6c,
	0x69, 0x67, 0x68, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x2d, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x52, 0x12,
	0x73, 0x65, 0x6c, 0x65, 0x63, 0x74, 0x65, 0x64, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x1a, 0x8c, 0x17, 0x0a, 0x0a, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x69, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x08, 0x6c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x6f,
	0x6e, 0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69,
	0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x68, 0x65, 0x61, 0x64, 0x69, 0x6e,
	0x67, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x6c, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x21, 0x0a,
	0x0c, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x69, 0x63, 0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x69, 0x63, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x1c, 0x0a, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x6e,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x6f,
	0x6e, 0x47, 0x72, 0x6f, 0x75, 0x6e, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x69, 0x67, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x73,
	0x69, 0x67, 0x6e, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1c, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x52, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x56, 0x0a, 0x0a, 0x65, 0x78, 0x74,
	0x72, 0x61, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x37, 0x2e,
	0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x74,
	0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x09, 0x65, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66,
	0x6f, 0x1a, 0xbd, 0x13, 0x0a, 0x09, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x1b, 0x0a, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x06, 0x66, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03,
	0x72, 0x65, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x03, 0x72, 0x65, 0x67,
	0x88, 0x01, 0x01, 0x12, 0x58, 0x0a, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x3d, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74,
	0x61, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x52, 0x6f, 0x75, 0x74,
	0x65, 0x48, 0x02, 0x52, 0x05, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x48, 0x03, 0x52, 0x04, 0x74,
	0x79, 0x70, 0x65, 0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x06, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b,
	0x88, 0x01, 0x01, 0x12, 0x1b, 0x0a, 0x06, 0x76, 0x73, 0x70, 0x65, 0x65, 0x64, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x06, 0x76, 0x73, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01,
	0x12, 0x24, 0x0a, 0x0b, 0x61, 0x63, 0x5f, 0x62, 0x69, 0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x48, 0x06, 0x52, 0x0a, 0x61, 0x63, 0x42, 0x69, 0x72, 0x74, 0x68,
	0x64, 0x61, 0x79, 0x88, 0x01, 0x01, 0x12, 0x29, 0x0a, 0x0e, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07,
	0x52, 0x0c, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4f, 0x66, 0x52, 0x65, 0x67, 0x88, 0x01,
	0x01, 0x12, 0x61, 0x0a, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x40, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61,
	0x74, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x53, 0x63, 0x68,
	0x65, 0x64, 0x75, 0x6c, 0x65, 0x48, 0x08, 0x52, 0x08, 0x73, 0x63, 0x68, 0x65, 0x64, 0x75, 0x6c,
	0x65, 0x88, 0x01, 0x01, 0x12, 0x1c, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x6f, 0x5f, 0x69, 0x64, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x06, 0x6c, 0x6f, 0x67, 0x6f, 0x49, 0x64, 0x88,
	0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x08, 0x61, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65,
	0x88, 0x01, 0x01, 0x12, 0x5b, 0x0a, 0x08, 0x65, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x3b, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65,
	0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65,
	0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46, 0x6c, 0x69, 0x67, 0x68, 0x74,
	0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49, 0x6e, 0x66, 0x6f, 0x2e, 0x45,
	0x4d, 0x53, 0x48, 0x0b, 0x52, 0x07, 0x65, 0x6d, 0x73, 0x49, 0x6e, 0x66, 0x6f, 0x88, 0x01, 0x01,
	0x12, 0x77, 0x0a, 0x10, 0x65, 0x6d, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x47, 0x2e, 0x66, 0x72, 0x32,
	0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x46,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x44, 0x61, 0x74, 0x61, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x49,
	0x6e, 0x66, 0x6f, 0x2e, 0x45, 0x4d, 0x53, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x48, 0x0c, 0x52, 0x0f, 0x65, 0x6d, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x1a, 0x2b, 0x0a, 0x05, 0x52, 0x6f, 0x75,
	0x74, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x1a, 0x76, 0x0a, 0x08, 0x53, 0x63, 0x68, 0x65, 0x64, 0x75,
	0x6c, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x03, 0x73, 0x74, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x03, 0x65, 0x74, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x61, 0x74, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x74, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x73, 0x74, 0x61, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x73, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03, 0x65, 0x74,
	0x61, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x65, 0x74, 0x61, 0x12, 0x10, 0x0a, 0x03,
	0x61, 0x74, 0x61, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x61, 0x74, 0x61, 0x1a, 0xde,
	0x03, 0x0a, 0x03, 0x45, 0x4d, 0x53, 0x12, 0x15, 0x0a, 0x03, 0x71, 0x6e, 0x68, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x00, 0x52, 0x03, 0x71, 0x6e, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x61, 0x6d, 0x63, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x48, 0x01, 0x52, 0x04, 0x61,
	0x6d, 0x63, 0x70, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x61, 0x66, 0x6d, 0x73, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x48, 0x02, 0x52, 0x04, 0x61, 0x66, 0x6d, 0x73, 0x88, 0x01, 0x01, 0x12,
	0x15, 0x0a, 0x03, 0x6f, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x48, 0x03, 0x52, 0x03,
	0x6f, 0x61, 0x74, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a, 0x03, 0x69, 0x61, 0x73, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x48, 0x04, 0x52, 0x03, 0x69, 0x61, 0x73, 0x88, 0x01, 0x01, 0x12, 0x15, 0x0a,
	0x03, 0x74, 0x61, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x48, 0x05, 0x52, 0x03, 0x74, 0x61,
	0x73, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a, 0x04, 0x6d, 0x61, 0x63, 0x68, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x05, 0x48, 0x06, 0x52, 0x04, 0x6d, 0x61, 0x63, 0x68, 0x88, 0x01, 0x01, 0x12, 0x17, 0x0a,
	0x04, 0x61, 0x67, 0x70, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x48, 0x07, 0x52, 0x04, 0x61,
	0x67, 0x70, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1f, 0x0a, 0x08, 0x61, 0x67, 0x70, 0x73, 0x64, 0x69,
	0x66, 0x66, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x48, 0x08, 0x52, 0x08, 0x61, 0x67, 0x70, 0x73,
	0x64, 0x69, 0x66, 0x66, 0x88, 0x01, 0x01, 0x12, 0x1d, 0x0a, 0x07, 0x61, 0x70, 0x66, 0x6c, 0x61,
	0x67, 0x73, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x48, 0x09, 0x52, 0x07, 0x61, 0x70, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x88, 0x01, 0x01, 0x12, 0x1e, 0x0a, 0x08, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64,
	0x69, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0a, 0x52, 0x07, 0x77, 0x69, 0x6e, 0x64,
	0x44, 0x69, 0x72, 0x88, 0x01, 0x01, 0x12, 0x22, 0x0a, 0x0a, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0b, 0x52, 0x09, 0x77, 0x69,
	0x6e, 0x64, 0x53, 0x70, 0x65, 0x65, 0x64, 0x88, 0x01, 0x01, 0x12, 0x13, 0x0a, 0x02, 0x72, 0x73,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x48, 0x0c, 0x52, 0x02, 0x72, 0x73, 0x88, 0x01, 0x01, 0x42,
	0x06, 0x0a, 0x04, 0x5f, 0x71, 0x6e, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x6d, 0x63, 0x70,
	0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61, 0x66, 0x6d, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x6f, 0x61,
	0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x69, 0x61, 0x73, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x74, 0x61,
	0x73, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x61,
	0x67, 0x70, 0x73, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x67, 0x70, 0x73, 0x64, 0x69, 0x66, 0x66,
	0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x61, 0x70, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x42, 0x0b, 0x0a, 0x09,
	0x5f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x42, 0x0d, 0x0a, 0x0b, 0x5f, 0x77, 0x69,
	0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x05, 0x0a, 0x03, 0x5f, 0x72, 0x73, 0x1a,
	0xd8, 0x07, 0x0a, 0x0f, 0x45, 0x4d, 0x53, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x12, 0x2e, 0x0a, 0x10, 0x71, 0x6e, 0x68, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x48, 0x00, 0x52,
	0x0f, 0x71, 0x6e, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x6d, 0x63, 0x70, 0x5f, 0x61, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x48, 0x01,
	0x52, 0x10, 0x61, 0x6d, 0x63, 0x70, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x66, 0x6d, 0x73, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x48, 0x02, 0x52, 0x10, 0x61, 0x66, 0x6d, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x6f, 0x61, 0x74, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x03, 0x52, 0x0f, 0x6f, 0x61, 0x74, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x69, 0x61, 0x73, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x04, 0x52, 0x0f, 0x69, 0x61, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x2e, 0x0a, 0x10, 0x74, 0x61, 0x73, 0x5f, 0x61,
	0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x08, 0x48, 0x05, 0x52, 0x0f, 0x74, 0x61, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x6d, 0x61, 0x63, 0x68, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x08, 0x48, 0x06, 0x52, 0x10, 0x6d, 0x61, 0x63, 0x68, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x30, 0x0a, 0x11, 0x61, 0x67, 0x70,
	0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x08, 0x48, 0x07, 0x52, 0x10, 0x61, 0x67, 0x70, 0x73, 0x41, 0x76, 0x61, 0x69,
	0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x15, 0x61,
	0x67, 0x70, 0x73, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69,
	0x6c, 0x69, 0x74, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x08, 0x48, 0x08, 0x52, 0x14, 0x61, 0x67,
	0x70, 0x73, 0x64, 0x69, 0x66, 0x66, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x36, 0x0a, 0x14, 0x61, 0x70, 0x66, 0x6c, 0x61, 0x67, 0x73,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x08, 0x48, 0x09, 0x52, 0x13, 0x61, 0x70, 0x66, 0x6c, 0x61, 0x67, 0x73, 0x41, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x37, 0x0a,
	0x15, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0a, 0x52, 0x13,
	0x77, 0x69, 0x6e, 0x64, 0x44, 0x69, 0x72, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c,
	0x69, 0x74, 0x79, 0x88, 0x01, 0x01, 0x12, 0x3b, 0x0a, 0x17, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x73,
	0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0b, 0x52, 0x15, 0x77, 0x69, 0x6e, 0x64, 0x53,
	0x70, 0x65, 0x65, 0x64, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x88, 0x01, 0x01, 0x12, 0x2c, 0x0a, 0x0f, 0x72, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x08, 0x48, 0x0c, 0x52, 0x0e,
	0x72, 0x73, 0x41, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x88, 0x01,
	0x01, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x71, 0x6e, 0x68, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x6d, 0x63, 0x70, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12,
	0x5f, 0x61, 0x66, 0x6d, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69,
	0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x6f, 0x61, 0x74, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11, 0x5f, 0x69, 0x61, 0x73, 0x5f,
	0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x74, 0x61, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x6d, 0x61, 0x63, 0x68, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x14, 0x0a, 0x12, 0x5f, 0x61, 0x67, 0x70, 0x73,
	0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x18, 0x0a,
	0x16, 0x5f, 0x61, 0x67, 0x70, 0x73, 0x64, 0x69, 0x66, 0x66, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c,
	0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x17, 0x0a, 0x15, 0x5f, 0x61, 0x70, 0x66, 0x6c,
	0x61, 0x67, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79,
	0x42, 0x18, 0x0a, 0x16, 0x5f, 0x77, 0x69, 0x6e, 0x64, 0x5f, 0x64, 0x69, 0x72, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x1a, 0x0a, 0x18, 0x5f, 0x77,
	0x69, 0x6e, 0x64, 0x5f, 0x73, 0x70, 0x65, 0x65, 0x64, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61,
	0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x72, 0x73, 0x5f, 0x61, 0x76,
	0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74, 0x79, 0x42, 0x09, 0x0a, 0x07, 0x5f, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x42, 0x06, 0x0a, 0x04, 0x5f, 0x72, 0x65, 0x67, 0x42, 0x08, 0x0a,
	0x06, 0x5f, 0x72, 0x6f, 0x75, 0x74, 0x65, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x74, 0x79, 0x70, 0x65,
	0x42, 0x09, 0x0a, 0x07, 0x5f, 0x73, 0x71, 0x75, 0x61, 0x77, 0x6b, 0x42, 0x09, 0x0a, 0x07, 0x5f,
	0x76, 0x73, 0x70, 0x65, 0x65, 0x64, 0x42, 0x0e, 0x0a, 0x0c, 0x5f, 0x61, 0x63, 0x5f, 0x62, 0x69,
	0x72, 0x74, 0x68, 0x64, 0x61, 0x79, 0x42, 0x11, 0x0a, 0x0f, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74,
	0x72, 0x79, 0x5f, 0x6f, 0x66, 0x5f, 0x72, 0x65, 0x67, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x63,
	0x68, 0x65, 0x64, 0x75, 0x6c, 0x65, 0x42, 0x0a, 0x0a, 0x08, 0x5f, 0x6c, 0x6f, 0x67, 0x6f, 0x5f,
	0x69, 0x64, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x61, 0x69, 0x72, 0x73, 0x70, 0x61, 0x63, 0x65, 0x42,
	0x0b, 0x0a, 0x09, 0x5f, 0x65, 0x6d, 0x73, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x42, 0x13, 0x0a, 0x11,
	0x5f, 0x65, 0x6d, 0x73, 0x5f, 0x61, 0x76, 0x61, 0x69, 0x6c, 0x61, 0x62, 0x69, 0x6c, 0x69, 0x74,
	0x79, 0x1a, 0xb6, 0x01, 0x0a, 0x0a, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x12, 0x50, 0x0a, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x36, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x53, 0x74, 0x61, 0x74, 0x69, 0x73, 0x74, 0x69, 0x63, 0x73,
	0x2e, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x56, 0x52, 0x07, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x73, 0x1a, 0x56, 0x0a, 0x08, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x4b, 0x56, 0x12, 0x34,
	0x0a, 0x06, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1c,
	0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76,
	0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x52, 0x06, 0x73, 0x6f,
	0x75, 0x72, 0x63, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x2a, 0xe6, 0x01, 0x0a, 0x07, 0x53,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x0d, 0x0a, 0x09, 0x50, 0x41, 0x53, 0x53, 0x45, 0x4e,
	0x47, 0x45, 0x52, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x41, 0x52, 0x47, 0x4f, 0x10, 0x01,
	0x12, 0x1b, 0x0a, 0x17, 0x4d, 0x49, 0x4c, 0x49, 0x54, 0x41, 0x52, 0x59, 0x5f, 0x41, 0x4e, 0x44,
	0x5f, 0x47, 0x4f, 0x56, 0x45, 0x52, 0x4e, 0x4d, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x55, 0x53, 0x49, 0x4e, 0x45, 0x53, 0x53, 0x5f, 0x4a, 0x45, 0x54, 0x53, 0x10, 0x03,
	0x12, 0x14, 0x0a, 0x10, 0x47, 0x45, 0x4e, 0x45, 0x52, 0x41, 0x4c, 0x5f, 0x41, 0x56, 0x49, 0x41,
	0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x45, 0x4c, 0x49, 0x43, 0x4f,
	0x50, 0x54, 0x45, 0x52, 0x53, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x4c, 0x49, 0x47, 0x48, 0x54,
	0x45, 0x52, 0x5f, 0x54, 0x48, 0x41, 0x4e, 0x5f, 0x41, 0x49, 0x52, 0x10, 0x06, 0x12, 0x0b, 0x0a,
	0x07, 0x47, 0x4c, 0x49, 0x44, 0x45, 0x52, 0x53, 0x10, 0x07, 0x12, 0x0a, 0x0a, 0x06, 0x44, 0x52,
	0x4f, 0x4e, 0x45, 0x53, 0x10, 0x08, 0x12, 0x13, 0x0a, 0x0f, 0x47, 0x52, 0x4f, 0x55, 0x4e, 0x44,
	0x5f, 0x56, 0x45, 0x48, 0x49, 0x43, 0x4c, 0x45, 0x53, 0x10, 0x09, 0x12, 0x11, 0x0a, 0x0d, 0x4f,
	0x54, 0x48, 0x45, 0x52, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x10, 0x0a, 0x12, 0x13,
	0x0a, 0x0f, 0x4e, 0x4f, 0x4e, 0x5f, 0x43, 0x41, 0x54, 0x45, 0x47, 0x4f, 0x52, 0x49, 0x5a, 0x45,
	0x44, 0x10, 0x0b, 0x2a, 0x8d, 0x01, 0x0a, 0x0a, 0x44, 0x61, 0x74, 0x61, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x41, 0x44, 0x53, 0x42, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x4d, 0x4c, 0x41, 0x54, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x46, 0x4c, 0x41, 0x52, 0x4d, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x46, 0x41, 0x41, 0x10, 0x03, 0x12, 0x0d, 0x0a, 0x09, 0x45, 0x53,
	0x54, 0x49, 0x4d, 0x41, 0x54, 0x45, 0x44, 0x10, 0x04, 0x12, 0x0d, 0x0a, 0x09, 0x53, 0x41, 0x54,
	0x45, 0x4c, 0x4c, 0x49, 0x54, 0x45, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x54, 0x48, 0x45,
	0x52, 0x5f, 0x44, 0x41, 0x54, 0x41, 0x5f, 0x53, 0x4f, 0x55, 0x52, 0x43, 0x45, 0x10, 0x06, 0x12,
	0x07, 0x0a, 0x03, 0x55, 0x41, 0x54, 0x10, 0x07, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x50, 0x49, 0x44,
	0x45, 0x52, 0x54, 0x52, 0x41, 0x43, 0x4b, 0x53, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x55,
	0x53, 0x10, 0x09, 0x32, 0x5b, 0x0a, 0x04, 0x46, 0x65, 0x65, 0x64, 0x12, 0x53, 0x0a, 0x08, 0x4c,
	0x69, 0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x12, 0x21, 0x2e, 0x66, 0x72, 0x32, 0x34, 0x2e, 0x66,
	0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69, 0x76, 0x65, 0x46,
	0x65, 0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x22, 0x2e, 0x66, 0x72, 0x32,
	0x34, 0x2e, 0x66, 0x65, 0x65, 0x64, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x4c, 0x69,
	0x76, 0x65, 0x46, 0x65, 0x65, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00,
	0x42, 0x1a, 0x5a, 0x18, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x66,
	0x6c, 0x69, 0x67, 0x68, 0x74, 0x64, 0x62, 0x2f, 0x66, 0x72, 0x32, 0x34, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_fr24_proto_rawDescOnce sync.Once
	file_fr24_proto_rawDescData = file_fr24_proto_rawDesc
)

func file_fr24_proto_rawDescGZIP() []byte {
	file_fr24_proto_rawDescOnce.Do(func() {
		file_fr24_proto_rawDescData = protoimpl.X.CompressGZIP(file_fr24_proto_rawDescData)
	})
	return file_fr24_proto_rawDescData
}

var file_fr24_proto_enumTypes = make([]protoimpl.EnumInfo, 5)
var file_fr24_proto_msgTypes = make([]protoimpl.MessageInfo, 20)
var file_fr24_proto_goTypes = []interface{}{
	(Service)(0),                                                  // 0: fr24.feed.api.v1.Service
	(DataSource)(0),                                               // 1: fr24.feed.api.v1.DataSource
	(FiltersList_AirlineFilter_Type)(0),                           // 2: fr24.feed.api.v1.FiltersList.AirlineFilter.Type
	(FiltersList_AirportFilter_Type)(0),                           // 3: fr24.feed.api.v1.FiltersList.AirportFilter.Type
	(LiveFeedRequest_Settings_TrafficType)(0),                     // 4: fr24.feed.api.v1.LiveFeedRequest.Settings.TrafficType
	(*FiltersList)(nil),                                           // 5: fr24.feed.api.v1.FiltersList
	(*LiveFeedRequest)(nil),                                       // 6: fr24.feed.api.v1.LiveFeedRequest
	(*LiveFeedResponse)(nil),                                      // 7: fr24.feed.api.v1.LiveFeedResponse
	(*FiltersList_AltitudeRange)(nil),                             // 8: fr24.feed.api.v1.FiltersList.AltitudeRange
	(*FiltersList_SpeedRange)(nil),                                // 9: fr24.feed.api.v1.FiltersList.SpeedRange
	(*FiltersList_AirlineFilter)(nil),                             // 10: fr24.feed.api.v1.FiltersList.AirlineFilter
	(*FiltersList_AirportFilter)(nil),                             // 11: fr24.feed.api.v1.FiltersList.AirportFilter
	(*FiltersList_BirthYearRange)(nil),                            // 12: fr24.feed.api.v1.FiltersList.BirthYearRange
	(*FiltersList_ODFilter)(nil),                                  // 13: fr24.feed.api.v1.FiltersList.ODFilter
	(*LiveFeedRequest_Bounds)(nil),                                // 14: fr24.feed.api.v1.LiveFeedRequest.Bounds
	(*LiveFeedRequest_Settings)(nil),                              // 15: fr24.feed.api.v1.LiveFeedRequest.Settings
	(*LiveFeedRequest_FieldMask)(nil),                             // 16: fr24.feed.api.v1.LiveFeedRequest.FieldMask
	(*LiveFeedResponse_FlightData)(nil),                           // 17: fr24.feed.api.v1.LiveFeedResponse.FlightData
	(*LiveFeedResponse_Statistics)(nil),                           // 18: fr24.feed.api.v1.LiveFeedResponse.Statistics
	(*LiveFeedResponse_FlightData_ExtraInfo)(nil),                 // 19: fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo
	(*LiveFeedResponse_FlightData_ExtraInfo_Route)(nil),           // 20: fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.Route
	(*LiveFeedResponse_FlightData_ExtraInfo_Schedule)(nil),        // 21: fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.Schedule
	(*LiveFeedResponse_FlightData_ExtraInfo_EMS)(nil),             // 22: fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.EMS
	(*LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability)(nil), // 23: fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.EMSAvailability
	(*LiveFeedResponse_Statistics_SourceKV)(nil),                  // 24: fr24.feed.api.v1.LiveFeedResponse.Statistics.SourceKV
}
var file_fr24_proto_depIdxs = []int32{
	8,  // 0: fr24.feed.api.v1.FiltersList.altitude_ranges_list:type_name -> fr24.feed.api.v1.FiltersList.AltitudeRange
	9,  // 1: fr24.feed.api.v1.FiltersList.speed_ranges_list:type_name -> fr24.feed.api.v1.FiltersList.SpeedRange
	10, // 2: fr24.feed.api.v1.FiltersList.airline_filters_list:type_name -> fr24.feed.api.v1.FiltersList.AirlineFilter
	11, // 3: fr24.feed.api.v1.FiltersList.airports_list:type_name -> fr24.feed.api.v1.FiltersList.AirportFilter
	12, // 4: fr24.feed.api.v1.FiltersList.birth_year_ranges_list:type_name -> fr24.feed.api.v1.FiltersList.BirthYearRange
	13, // 5: fr24.feed.api.v1.FiltersList.origins_list:type_name -> fr24.feed.api.v1.FiltersList.ODFilter
	13, // 6: fr24.feed.api.v1.FiltersList.destinations_list:type_name -> fr24.feed.api.v1.FiltersList.ODFilter
	0,  // 7: fr24.feed.api.v1.FiltersList.categories_list:type_name -> fr24.feed.api.v1.Service
	14, // 8: fr24.feed.api.v1.LiveFeedRequest.bounds:type_name -> fr24.feed.api.v1.LiveFeedRequest.Bounds
	15, // 9: fr24.feed.api.v1.LiveFeedRequest.settings:type_name -> fr24.feed.api.v1.LiveFeedRequest.Settings
	5,  // 10: fr24.feed.api.v1.LiveFeedRequest.filters_list:type_name -> fr24.feed.api.v1.FiltersList
	16, // 11: fr24.feed.api.v1.LiveFeedRequest.field_mask:type_name -> fr24.feed.api.v1.LiveFeedRequest.FieldMask
	17, // 12: fr24.feed.api.v1.LiveFeedResponse.flights_list:type_name -> fr24.feed.api.v1.LiveFeedResponse.FlightData
	18, // 13: fr24.feed.api.v1.LiveFeedResponse.stats:type_name -> fr24.feed.api.v1.LiveFeedResponse.Statistics
	17, // 14: fr24.feed.api.v1.LiveFeedResponse.selected_flight_info:type_name -> fr24.feed.api.v1.LiveFeedResponse.FlightData
	2,  // 15: fr24.feed.api.v1.FiltersList.AirlineFilter.type:type_name -> fr24.feed.api.v1.FiltersList.AirlineFilter.Type
	3,  // 16: fr24.feed.api.v1.FiltersList.AirportFilter.type:type_name -> fr24.feed.api.v1.FiltersList.AirportFilter.Type
	1,  // 17: fr24.feed.api.v1.LiveFeedRequest.Settings.sources_list:type_name -> fr24.feed.api.v1.DataSource
	0,  // 18: fr24.feed.api.v1.LiveFeedRequest.Settings.services_list:type_name -> fr24.feed.api.v1.Service
	4,  // 19: fr24.feed.api.v1.LiveFeedRequest.Settings.traffic_type:type_name -> fr24.feed.api.v1.LiveFeedRequest.Settings.TrafficType
	1,  // 20: fr24.feed.api.v1.LiveFeedResponse.FlightData.source:type_name -> fr24.feed.api.v1.DataSource
	19, // 21: fr24.feed.api.v1.LiveFeedResponse.FlightData.extra_info:type_name -> fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo
	24, // 22: fr24.feed.api.v1.LiveFeedResponse.Statistics.sources:type_name -> fr24.feed.api.v1.LiveFeedResponse.Statistics.SourceKV
	20, // 23: fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.route:type_name -> fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.Route
	21, // 24: fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.schedule:type_name -> fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.Schedule
	22, // 25: fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.ems_info:type_name -> fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.EMS
	23, // 26: fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.ems_availability:type_name -> fr24.feed.api.v1.LiveFeedResponse.FlightData.ExtraInfo.EMSAvailability
	1,  // 27: fr24.feed.api.v1.LiveFeedResponse.Statistics.SourceKV.source:type_name -> fr24.feed.api.v1.DataSource
	6,  // 28: fr24.feed.api.v1.Feed.LiveFeed:input_type -> fr24.feed.api.v1.LiveFeedRequest
	7,  // 29: fr24.feed.api.v1.Feed.LiveFeed:output_type -> fr24.feed.api.v1.LiveFeedResponse
	29, // [29:30] is the sub-list for method output_type
	28, // [28:29] is the sub-list for method input_type
	28, // [28:28] is the sub-list for extension type_name
	28, // [28:28] is the sub-list for extension extendee
	0,  // [0:28] is the sub-list for field type_name
}

func init() { file_fr24_proto_init() }
func file_fr24_proto_init() {
	if File_fr24_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_fr24_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiltersList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiltersList_AltitudeRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiltersList_SpeedRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiltersList_AirlineFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiltersList_AirportFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiltersList_BirthYearRange); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FiltersList_ODFilter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedRequest_Bounds); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedRequest_Settings); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedRequest_FieldMask); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedResponse_FlightData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedResponse_Statistics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedResponse_FlightData_ExtraInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedResponse_FlightData_ExtraInfo_Route); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedResponse_FlightData_ExtraInfo_Schedule); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedResponse_FlightData_ExtraInfo_EMS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedResponse_FlightData_ExtraInfo_EMSAvailability); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_fr24_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LiveFeedResponse_Statistics_SourceKV); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	file_fr24_proto_msgTypes[1].OneofWrappers = []interface{}{}
	file_fr24_proto_msgTypes[14].OneofWrappers = []interface{}{}
	file_fr24_proto_msgTypes[17].OneofWrappers = []interface{}{}
	file_fr24_proto_msgTypes[18].OneofWrappers = []interface{}{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_fr24_proto_rawDesc,
			NumEnums:      5,
			NumMessages:   20,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_fr24_proto_goTypes,
		DependencyIndexes: file_fr24_proto_depIdxs,
		EnumInfos:         file_fr24_proto_enumTypes,
		MessageInfos:      file_fr24_proto_msgTypes,
	}.Build()
	File_fr24_proto = out.File
	file_fr24_proto_rawDesc = nil
	file_fr24_proto_goTypes = nil
	file_fr24_proto_depIdxs = nil
}
